// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum HotelStatus {
  pending
  partial
  paid
}
enum PaymentType {
  partial
  full
}
model User {
  id       Int      @id @default(autoincrement())
  username String
  email String @unique
  password String
  country String?
  img String?
  city String?
  phone Int? 
  roleId   Int
  role     Role     @relation(fields: [roleId], references: [id])
  hotels Hotel[]
  bookings Booking[]
  comments    Comments[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
model Hotel {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  categoryId   Int
  category     Category @relation(fields: [categoryId], references: [id])
  name         String
  type         String
  city         String
  address      String
  distance     String
  photos       String[]
  title        String
  desc         String
  rating       Float    @default(0)
  status       HotelStatus  @default(pending)  // 'pending', 'partial', 'paid'
  cheapestPrice Float
  featured     Boolean  @default(false)
  lat          Float?
  long         Float?
  slug         String   @unique
  createdAt    DateTime @default(now())
  room        Room[]
  offering    Offering[]
  amenities   Amenities[]
  comments    Comments[]
  serviceFee  ServiceFee[]
}
model Category {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  icon    String
  hotels  Hotel[]
  createdAt DateTime @default(now())
}
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
}

model Room {
  id           Int         @id @default(autoincrement())
  hotelId      Int
  hotel        Hotel       @relation(fields: [hotelId], references: [id])
  title        String
  price        Float
  maxPeople    Int
  desc         String
  slug         String      @unique
  roomNumbers  RoomNumber[]
  bookings     Booking[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model RoomNumber {
  id              Int          @id @default(autoincrement())
  roomId          Int
  room            Room         @relation(fields: [roomId], references: [id])
  number          Int
  unavailableDates DateTime[]
  @@unique([roomId, number])
}
model Booking {
  id              Int          @id @default(autoincrement())
  userId          Int
  user            User         @relation(fields: [userId], references: [id])
  name            String
  phone           Int?
  bookingRoom     BookingRoom[]
  active          Boolean      @default(false)
  modifiedOn      DateTime     @default(now())
  roomId          Int
  room            Room         @relation(fields: [roomId], references: [id])
  payment         Payment[]  //one to one
}

model BookingRoom {
  id              Int          @id @default(autoincrement())
  bookingId       Int
  booking         Booking      @relation(fields: [bookingId], references: [id])
  quantity        Int
  total           Float
  price           Float
  number          Int
  unavailableDates DateTime[] // trường hợp nếu booking trong đặt ngày không chủ phòng cho thuê -> sẽ vào đây
}

//những ưu đãi có trong hotel
model Offering {
  id Int @id @default(autoincrement())
  title String
  description String
  icons String
  hotelId Int
  hotel Hotel @relation(fields: [hotelId], references: [id])
}
//những tiện nghi có trong hotel
model Amenities {
  id Int @id @default(autoincrement())
  title String
  icon String
  hotelId Int
  hotel Hotel @relation(fields: [hotelId], references: [id])
}
model Comments {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  HotelId Int
  hotel Hotel @relation(fields: [HotelId], references: [id])
  content String
  createdAt DateTime @default(now())
}
model Payment {
  id          Int      @id @default(autoincrement())
  bookingId     Int
  booking       Booking   @relation(fields: [bookingId], references: [id])
  amount      Float
  paymentType PaymentType   // 'partial 10% -> 20%', 'full 100%'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model ServiceFee {
  id          Int      @id @default(autoincrement())
  hotelId     Int
  hotel       Hotel   @relation(fields: [hotelId], references: [id])
  feeAmount   Float   @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model RefreshToken {
  id        Int      @id @default(autoincrement())
  accessToken String
  refreshToken String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}